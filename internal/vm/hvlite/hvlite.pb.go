// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Microsoft/hcsshim/internal/vm/hvlite/hvlite.proto

/*
	Package hvlite is a generated protocol buffer package.

	It is generated from these files:
		github.com/Microsoft/hcsshim/internal/vm/hvlite/hvlite.proto

	It has these top-level messages:
		VMConfig
		SCSIDisk
		CreateVMRequest
		CreateVMResponse
		StartVMRequest
		StartVMResponse
		StopVMRequest
		StopVMResponse
		WaitVMRequest
		WaitVMResponse
		AddSCSIDiskRequest
		AddSCSIDiskResponse
		HVSocketListenRequest
		HVSocketListenResponse
*/
package hvlite

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SCSIDisk_DiskType int32

const (
	SCSIDisk_SCSI_DISK_TYPE_UNSPECIFIED SCSIDisk_DiskType = 0
	SCSIDisk_SCSI_DISK_TYPE_VHD1        SCSIDisk_DiskType = 1
	SCSIDisk_SCSI_DISK_TYPE_VHDX        SCSIDisk_DiskType = 2
)

var SCSIDisk_DiskType_name = map[int32]string{
	0: "SCSI_DISK_TYPE_UNSPECIFIED",
	1: "SCSI_DISK_TYPE_VHD1",
	2: "SCSI_DISK_TYPE_VHDX",
}
var SCSIDisk_DiskType_value = map[string]int32{
	"SCSI_DISK_TYPE_UNSPECIFIED": 0,
	"SCSI_DISK_TYPE_VHD1":        1,
	"SCSI_DISK_TYPE_VHDX":        2,
}

func (x SCSIDisk_DiskType) String() string {
	return proto.EnumName(SCSIDisk_DiskType_name, int32(x))
}
func (SCSIDisk_DiskType) EnumDescriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{1, 0} }

type VMConfig struct {
	VmID           string      `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	MemoryMb       uint64      `protobuf:"varint,2,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	ProcessorCount uint64      `protobuf:"varint,3,opt,name=processor_count,json=processorCount,proto3" json:"processor_count,omitempty"`
	ScsiDisks      []*SCSIDisk `protobuf:"bytes,4,rep,name=scsi_disks,json=scsiDisks" json:"scsi_disks,omitempty"`
	KernelPath     string      `protobuf:"bytes,5,opt,name=kernel_path,json=kernelPath,proto3" json:"kernel_path,omitempty"`
	InitrdPath     string      `protobuf:"bytes,6,opt,name=initrd_path,json=initrdPath,proto3" json:"initrd_path,omitempty"`
	KernelArgs     string      `protobuf:"bytes,7,opt,name=kernel_args,json=kernelArgs,proto3" json:"kernel_args,omitempty"`
}

func (m *VMConfig) Reset()                    { *m = VMConfig{} }
func (*VMConfig) ProtoMessage()               {}
func (*VMConfig) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{0} }

func (m *VMConfig) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

func (m *VMConfig) GetMemoryMb() uint64 {
	if m != nil {
		return m.MemoryMb
	}
	return 0
}

func (m *VMConfig) GetProcessorCount() uint64 {
	if m != nil {
		return m.ProcessorCount
	}
	return 0
}

func (m *VMConfig) GetScsiDisks() []*SCSIDisk {
	if m != nil {
		return m.ScsiDisks
	}
	return nil
}

func (m *VMConfig) GetKernelPath() string {
	if m != nil {
		return m.KernelPath
	}
	return ""
}

func (m *VMConfig) GetInitrdPath() string {
	if m != nil {
		return m.InitrdPath
	}
	return ""
}

func (m *VMConfig) GetKernelArgs() string {
	if m != nil {
		return m.KernelArgs
	}
	return ""
}

type SCSIDisk struct {
	Controller uint32            `protobuf:"varint,1,opt,name=controller,proto3" json:"controller,omitempty"`
	Lun        uint32            `protobuf:"varint,2,opt,name=lun,proto3" json:"lun,omitempty"`
	Path       string            `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Type       SCSIDisk_DiskType `protobuf:"varint,4,opt,name=type,proto3,enum=hvlite.SCSIDisk_DiskType" json:"type,omitempty"`
	ReadOnly   bool              `protobuf:"varint,5,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (m *SCSIDisk) Reset()                    { *m = SCSIDisk{} }
func (*SCSIDisk) ProtoMessage()               {}
func (*SCSIDisk) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{1} }

func (m *SCSIDisk) GetController() uint32 {
	if m != nil {
		return m.Controller
	}
	return 0
}

func (m *SCSIDisk) GetLun() uint32 {
	if m != nil {
		return m.Lun
	}
	return 0
}

func (m *SCSIDisk) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCSIDisk) GetType() SCSIDisk_DiskType {
	if m != nil {
		return m.Type
	}
	return SCSIDisk_SCSI_DISK_TYPE_UNSPECIFIED
}

func (m *SCSIDisk) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type CreateVMRequest struct {
	Config *VMConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *CreateVMRequest) Reset()                    { *m = CreateVMRequest{} }
func (*CreateVMRequest) ProtoMessage()               {}
func (*CreateVMRequest) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{2} }

func (m *CreateVMRequest) GetConfig() *VMConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type CreateVMResponse struct {
}

func (m *CreateVMResponse) Reset()                    { *m = CreateVMResponse{} }
func (*CreateVMResponse) ProtoMessage()               {}
func (*CreateVMResponse) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{3} }

type StartVMRequest struct {
}

func (m *StartVMRequest) Reset()                    { *m = StartVMRequest{} }
func (*StartVMRequest) ProtoMessage()               {}
func (*StartVMRequest) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{4} }

type StartVMResponse struct {
}

func (m *StartVMResponse) Reset()                    { *m = StartVMResponse{} }
func (*StartVMResponse) ProtoMessage()               {}
func (*StartVMResponse) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{5} }

type StopVMRequest struct {
}

func (m *StopVMRequest) Reset()                    { *m = StopVMRequest{} }
func (*StopVMRequest) ProtoMessage()               {}
func (*StopVMRequest) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{6} }

type StopVMResponse struct {
}

func (m *StopVMResponse) Reset()                    { *m = StopVMResponse{} }
func (*StopVMResponse) ProtoMessage()               {}
func (*StopVMResponse) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{7} }

type WaitVMRequest struct {
}

func (m *WaitVMRequest) Reset()                    { *m = WaitVMRequest{} }
func (*WaitVMRequest) ProtoMessage()               {}
func (*WaitVMRequest) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{8} }

type WaitVMResponse struct {
}

func (m *WaitVMResponse) Reset()                    { *m = WaitVMResponse{} }
func (*WaitVMResponse) ProtoMessage()               {}
func (*WaitVMResponse) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{9} }

type AddSCSIDiskRequest struct {
	Disk *SCSIDisk `protobuf:"bytes,1,opt,name=disk" json:"disk,omitempty"`
}

func (m *AddSCSIDiskRequest) Reset()                    { *m = AddSCSIDiskRequest{} }
func (*AddSCSIDiskRequest) ProtoMessage()               {}
func (*AddSCSIDiskRequest) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{10} }

func (m *AddSCSIDiskRequest) GetDisk() *SCSIDisk {
	if m != nil {
		return m.Disk
	}
	return nil
}

type AddSCSIDiskResponse struct {
}

func (m *AddSCSIDiskResponse) Reset()                    { *m = AddSCSIDiskResponse{} }
func (*AddSCSIDiskResponse) ProtoMessage()               {}
func (*AddSCSIDiskResponse) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{11} }

type HVSocketListenRequest struct {
	ServiceID    string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ListenerPath string `protobuf:"bytes,2,opt,name=listener_path,json=listenerPath,proto3" json:"listener_path,omitempty"`
}

func (m *HVSocketListenRequest) Reset()                    { *m = HVSocketListenRequest{} }
func (*HVSocketListenRequest) ProtoMessage()               {}
func (*HVSocketListenRequest) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{12} }

func (m *HVSocketListenRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *HVSocketListenRequest) GetListenerPath() string {
	if m != nil {
		return m.ListenerPath
	}
	return ""
}

type HVSocketListenResponse struct {
}

func (m *HVSocketListenResponse) Reset()                    { *m = HVSocketListenResponse{} }
func (*HVSocketListenResponse) ProtoMessage()               {}
func (*HVSocketListenResponse) Descriptor() ([]byte, []int) { return fileDescriptorHvlite, []int{13} }

func init() {
	proto.RegisterType((*VMConfig)(nil), "hvlite.VMConfig")
	proto.RegisterType((*SCSIDisk)(nil), "hvlite.SCSIDisk")
	proto.RegisterType((*CreateVMRequest)(nil), "hvlite.CreateVMRequest")
	proto.RegisterType((*CreateVMResponse)(nil), "hvlite.CreateVMResponse")
	proto.RegisterType((*StartVMRequest)(nil), "hvlite.StartVMRequest")
	proto.RegisterType((*StartVMResponse)(nil), "hvlite.StartVMResponse")
	proto.RegisterType((*StopVMRequest)(nil), "hvlite.StopVMRequest")
	proto.RegisterType((*StopVMResponse)(nil), "hvlite.StopVMResponse")
	proto.RegisterType((*WaitVMRequest)(nil), "hvlite.WaitVMRequest")
	proto.RegisterType((*WaitVMResponse)(nil), "hvlite.WaitVMResponse")
	proto.RegisterType((*AddSCSIDiskRequest)(nil), "hvlite.AddSCSIDiskRequest")
	proto.RegisterType((*AddSCSIDiskResponse)(nil), "hvlite.AddSCSIDiskResponse")
	proto.RegisterType((*HVSocketListenRequest)(nil), "hvlite.HVSocketListenRequest")
	proto.RegisterType((*HVSocketListenResponse)(nil), "hvlite.HVSocketListenResponse")
	proto.RegisterEnum("hvlite.SCSIDisk_DiskType", SCSIDisk_DiskType_name, SCSIDisk_DiskType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VM service

type VMClient interface {
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error)
	StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error)
	StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error)
	WaitVM(ctx context.Context, in *WaitVMRequest, opts ...grpc.CallOption) (*WaitVMResponse, error)
	AddSCSIDisk(ctx context.Context, in *AddSCSIDiskRequest, opts ...grpc.CallOption) (*AddSCSIDiskResponse, error)
	HVSocketListen(ctx context.Context, in *HVSocketListenRequest, opts ...grpc.CallOption) (*HVSocketListenResponse, error)
}

type vMClient struct {
	cc *grpc.ClientConn
}

func NewVMClient(cc *grpc.ClientConn) VMClient {
	return &vMClient{cc}
}

func (c *vMClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error) {
	out := new(CreateVMResponse)
	err := grpc.Invoke(ctx, "/hvlite.VM/CreateVM", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error) {
	out := new(StartVMResponse)
	err := grpc.Invoke(ctx, "/hvlite.VM/StartVM", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error) {
	out := new(StopVMResponse)
	err := grpc.Invoke(ctx, "/hvlite.VM/StopVM", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) WaitVM(ctx context.Context, in *WaitVMRequest, opts ...grpc.CallOption) (*WaitVMResponse, error) {
	out := new(WaitVMResponse)
	err := grpc.Invoke(ctx, "/hvlite.VM/WaitVM", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) AddSCSIDisk(ctx context.Context, in *AddSCSIDiskRequest, opts ...grpc.CallOption) (*AddSCSIDiskResponse, error) {
	out := new(AddSCSIDiskResponse)
	err := grpc.Invoke(ctx, "/hvlite.VM/AddSCSIDisk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMClient) HVSocketListen(ctx context.Context, in *HVSocketListenRequest, opts ...grpc.CallOption) (*HVSocketListenResponse, error) {
	out := new(HVSocketListenResponse)
	err := grpc.Invoke(ctx, "/hvlite.VM/HVSocketListen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VM service

type VMServer interface {
	CreateVM(context.Context, *CreateVMRequest) (*CreateVMResponse, error)
	StartVM(context.Context, *StartVMRequest) (*StartVMResponse, error)
	StopVM(context.Context, *StopVMRequest) (*StopVMResponse, error)
	WaitVM(context.Context, *WaitVMRequest) (*WaitVMResponse, error)
	AddSCSIDisk(context.Context, *AddSCSIDiskRequest) (*AddSCSIDiskResponse, error)
	HVSocketListen(context.Context, *HVSocketListenRequest) (*HVSocketListenResponse, error)
}

func RegisterVMServer(s *grpc.Server, srv VMServer) {
	s.RegisterService(&_VM_serviceDesc, srv)
}

func _VM_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvlite.VM/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvlite.VM/StartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StartVM(ctx, req.(*StartVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvlite.VM/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).StopVM(ctx, req.(*StopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_WaitVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).WaitVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvlite.VM/WaitVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).WaitVM(ctx, req.(*WaitVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_AddSCSIDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSCSIDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).AddSCSIDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvlite.VM/AddSCSIDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).AddSCSIDisk(ctx, req.(*AddSCSIDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VM_HVSocketListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HVSocketListenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).HVSocketListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvlite.VM/HVSocketListen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).HVSocketListen(ctx, req.(*HVSocketListenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hvlite.VM",
	HandlerType: (*VMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VM_CreateVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VM_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VM_StopVM_Handler,
		},
		{
			MethodName: "WaitVM",
			Handler:    _VM_WaitVM_Handler,
		},
		{
			MethodName: "AddSCSIDisk",
			Handler:    _VM_AddSCSIDisk_Handler,
		},
		{
			MethodName: "HVSocketListen",
			Handler:    _VM_HVSocketListen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Microsoft/hcsshim/internal/vm/hvlite/hvlite.proto",
}

func (m *VMConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VmID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(len(m.VmID)))
		i += copy(dAtA[i:], m.VmID)
	}
	if m.MemoryMb != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(m.MemoryMb))
	}
	if m.ProcessorCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(m.ProcessorCount))
	}
	if len(m.ScsiDisks) > 0 {
		for _, msg := range m.ScsiDisks {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHvlite(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.KernelPath) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(len(m.KernelPath)))
		i += copy(dAtA[i:], m.KernelPath)
	}
	if len(m.InitrdPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(len(m.InitrdPath)))
		i += copy(dAtA[i:], m.InitrdPath)
	}
	if len(m.KernelArgs) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(len(m.KernelArgs)))
		i += copy(dAtA[i:], m.KernelArgs)
	}
	return i, nil
}

func (m *SCSIDisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCSIDisk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Controller != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(m.Controller))
	}
	if m.Lun != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(m.Lun))
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(m.Type))
	}
	if m.ReadOnly {
		dAtA[i] = 0x28
		i++
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreateVMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVMResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StartVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StartVMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartVMResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StopVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StopVMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopVMResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WaitVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WaitVMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitVMResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AddSCSIDiskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSCSIDiskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Disk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(m.Disk.Size()))
		n2, err := m.Disk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AddSCSIDiskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSCSIDiskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HVSocketListenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HVSocketListenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(len(m.ServiceID)))
		i += copy(dAtA[i:], m.ServiceID)
	}
	if len(m.ListenerPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHvlite(dAtA, i, uint64(len(m.ListenerPath)))
		i += copy(dAtA[i:], m.ListenerPath)
	}
	return i, nil
}

func (m *HVSocketListenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HVSocketListenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintHvlite(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VMConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.VmID)
	if l > 0 {
		n += 1 + l + sovHvlite(uint64(l))
	}
	if m.MemoryMb != 0 {
		n += 1 + sovHvlite(uint64(m.MemoryMb))
	}
	if m.ProcessorCount != 0 {
		n += 1 + sovHvlite(uint64(m.ProcessorCount))
	}
	if len(m.ScsiDisks) > 0 {
		for _, e := range m.ScsiDisks {
			l = e.Size()
			n += 1 + l + sovHvlite(uint64(l))
		}
	}
	l = len(m.KernelPath)
	if l > 0 {
		n += 1 + l + sovHvlite(uint64(l))
	}
	l = len(m.InitrdPath)
	if l > 0 {
		n += 1 + l + sovHvlite(uint64(l))
	}
	l = len(m.KernelArgs)
	if l > 0 {
		n += 1 + l + sovHvlite(uint64(l))
	}
	return n
}

func (m *SCSIDisk) Size() (n int) {
	var l int
	_ = l
	if m.Controller != 0 {
		n += 1 + sovHvlite(uint64(m.Controller))
	}
	if m.Lun != 0 {
		n += 1 + sovHvlite(uint64(m.Lun))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovHvlite(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovHvlite(uint64(m.Type))
	}
	if m.ReadOnly {
		n += 2
	}
	return n
}

func (m *CreateVMRequest) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovHvlite(uint64(l))
	}
	return n
}

func (m *CreateVMResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StartVMRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StartVMResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StopVMRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StopVMResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WaitVMRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WaitVMResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AddSCSIDiskRequest) Size() (n int) {
	var l int
	_ = l
	if m.Disk != nil {
		l = m.Disk.Size()
		n += 1 + l + sovHvlite(uint64(l))
	}
	return n
}

func (m *AddSCSIDiskResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HVSocketListenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceID)
	if l > 0 {
		n += 1 + l + sovHvlite(uint64(l))
	}
	l = len(m.ListenerPath)
	if l > 0 {
		n += 1 + l + sovHvlite(uint64(l))
	}
	return n
}

func (m *HVSocketListenResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovHvlite(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHvlite(x uint64) (n int) {
	return sovHvlite(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VMConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMConfig{`,
		`VmID:` + fmt.Sprintf("%v", this.VmID) + `,`,
		`MemoryMb:` + fmt.Sprintf("%v", this.MemoryMb) + `,`,
		`ProcessorCount:` + fmt.Sprintf("%v", this.ProcessorCount) + `,`,
		`ScsiDisks:` + strings.Replace(fmt.Sprintf("%v", this.ScsiDisks), "SCSIDisk", "SCSIDisk", 1) + `,`,
		`KernelPath:` + fmt.Sprintf("%v", this.KernelPath) + `,`,
		`InitrdPath:` + fmt.Sprintf("%v", this.InitrdPath) + `,`,
		`KernelArgs:` + fmt.Sprintf("%v", this.KernelArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCSIDisk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCSIDisk{`,
		`Controller:` + fmt.Sprintf("%v", this.Controller) + `,`,
		`Lun:` + fmt.Sprintf("%v", this.Lun) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ReadOnly:` + fmt.Sprintf("%v", this.ReadOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVMRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVMRequest{`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "VMConfig", "VMConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVMResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVMResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StartVMRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartVMRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StartVMResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartVMResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StopVMRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopVMRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StopVMResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopVMResponse{`,
		`}`,
	}, "")
	return s
}
func (this *WaitVMRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WaitVMRequest{`,
		`}`,
	}, "")
	return s
}
func (this *WaitVMResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WaitVMResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AddSCSIDiskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSCSIDiskRequest{`,
		`Disk:` + strings.Replace(fmt.Sprintf("%v", this.Disk), "SCSIDisk", "SCSIDisk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddSCSIDiskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddSCSIDiskResponse{`,
		`}`,
	}, "")
	return s
}
func (this *HVSocketListenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HVSocketListenRequest{`,
		`ServiceID:` + fmt.Sprintf("%v", this.ServiceID) + `,`,
		`ListenerPath:` + fmt.Sprintf("%v", this.ListenerPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HVSocketListenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HVSocketListenResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringHvlite(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VMConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryMb", wireType)
			}
			m.MemoryMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryMb |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessorCount", wireType)
			}
			m.ProcessorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessorCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScsiDisks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScsiDisks = append(m.ScsiDisks, &SCSIDisk{})
			if err := m.ScsiDisks[len(m.ScsiDisks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitrdPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitrdPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCSIDisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCSIDisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCSIDisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			m.Controller = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Controller |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lun", wireType)
			}
			m.Lun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lun |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SCSIDisk_DiskType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &VMConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartVMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartVMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartVMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopVMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopVMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopVMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitVMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitVMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitVMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSCSIDiskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSCSIDiskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSCSIDiskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Disk == nil {
				m.Disk = &SCSIDisk{}
			}
			if err := m.Disk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSCSIDiskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSCSIDiskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSCSIDiskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HVSocketListenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HVSocketListenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HVSocketListenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenerPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHvlite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenerPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HVSocketListenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HVSocketListenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HVSocketListenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHvlite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHvlite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHvlite(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHvlite
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHvlite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHvlite
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHvlite
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHvlite(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHvlite = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHvlite   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/Microsoft/hcsshim/internal/vm/hvlite/hvlite.proto", fileDescriptorHvlite)
}

var fileDescriptorHvlite = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0x8d, 0x13, 0xbf, 0x3c, 0xe7, 0x96, 0x7c, 0x30, 0x4f, 0x6d, 0x8d, 0x9f, 0x9e, 0x1b, 0x99,
	0x4a, 0x64, 0x41, 0x13, 0x51, 0x56, 0x40, 0x25, 0xd4, 0x26, 0x45, 0xb5, 0x20, 0x50, 0xec, 0x12,
	0x3e, 0x84, 0x64, 0x39, 0xf6, 0x34, 0x31, 0xb1, 0x3d, 0x61, 0x66, 0x12, 0x29, 0x3b, 0x24, 0xfe,
	0x00, 0x2b, 0x7e, 0x53, 0x97, 0x2c, 0x59, 0x55, 0x34, 0xfc, 0x0b, 0x56, 0xc8, 0x63, 0x3b, 0x5f,
	0xcd, 0xdb, 0x24, 0x33, 0xe7, 0x9e, 0x7b, 0x66, 0xee, 0x3d, 0xd7, 0x03, 0x17, 0xa3, 0x80, 0x8f,
	0x67, 0xc3, 0xb6, 0x47, 0xa2, 0x4e, 0x3f, 0xf0, 0x28, 0x61, 0xe4, 0x9e, 0x77, 0xc6, 0x1e, 0x63,
	0xe3, 0x20, 0xea, 0x04, 0x31, 0xc7, 0x34, 0x76, 0xc3, 0xce, 0x3c, 0xea, 0x8c, 0xe7, 0x61, 0xc0,
	0x71, 0xf6, 0xd7, 0x9e, 0x52, 0xc2, 0x09, 0x2a, 0xa7, 0x3b, 0xed, 0x6c, 0x43, 0x65, 0x44, 0x46,
	0xa4, 0x23, 0xc2, 0xc3, 0xd9, 0xbd, 0xd8, 0x89, 0x8d, 0x58, 0xa5, 0x69, 0xc6, 0xef, 0x45, 0x50,
	0x06, 0xfd, 0x2e, 0x89, 0xef, 0x83, 0x11, 0x7a, 0x03, 0x2f, 0xe6, 0x91, 0x13, 0xf8, 0xaa, 0xd4,
	0x94, 0x5a, 0x95, 0x2b, 0x65, 0xf9, 0x78, 0x22, 0x0f, 0x22, 0xb3, 0x67, 0xc9, 0xf3, 0xc8, 0xf4,
	0xd1, 0x6b, 0xa8, 0x44, 0x38, 0x22, 0x74, 0xe1, 0x44, 0x43, 0xb5, 0xd8, 0x94, 0x5a, 0xb2, 0xa5,
	0xa4, 0x40, 0x7f, 0x88, 0x3e, 0x80, 0xfa, 0x94, 0x12, 0x0f, 0x33, 0x46, 0xa8, 0xe3, 0x91, 0x59,
	0xcc, 0xd5, 0x92, 0xa0, 0xd4, 0x56, 0x70, 0x37, 0x41, 0x51, 0x07, 0x80, 0x79, 0x2c, 0x70, 0xfc,
	0x80, 0x4d, 0x98, 0x2a, 0x37, 0x4b, 0xad, 0x83, 0xf3, 0x46, 0x3b, 0xab, 0xc5, 0xee, 0xda, 0x66,
	0x2f, 0x60, 0x13, 0xab, 0x92, 0x70, 0x92, 0x15, 0x43, 0x27, 0x70, 0x30, 0xc1, 0x34, 0xc6, 0xa1,
	0x33, 0x75, 0xf9, 0x58, 0x7d, 0x91, 0xdc, 0xcd, 0x82, 0x14, 0xba, 0x75, 0xf9, 0x38, 0x21, 0x04,
	0x71, 0xc0, 0xa9, 0x9f, 0x12, 0xca, 0x29, 0x21, 0x85, 0x72, 0x42, 0xa6, 0xe0, 0xd2, 0x11, 0x53,
	0x5f, 0x6e, 0x2a, 0x5c, 0xd2, 0x11, 0x33, 0xfe, 0x93, 0x40, 0xc9, 0x8f, 0x46, 0x3a, 0x80, 0x47,
	0x62, 0x4e, 0x49, 0x18, 0x62, 0x2a, 0x5a, 0x51, 0xb5, 0x36, 0x10, 0xd4, 0x80, 0x52, 0x38, 0x8b,
	0x45, 0x03, 0xaa, 0x56, 0xb2, 0x44, 0x08, 0x64, 0x71, 0x72, 0x49, 0x08, 0x8b, 0x35, 0x3a, 0x03,
	0x99, 0x2f, 0xa6, 0x58, 0x95, 0x9b, 0x52, 0xab, 0x76, 0xfe, 0xde, 0x6e, 0x81, 0xed, 0xe4, 0xe7,
	0x6e, 0x31, 0xc5, 0x96, 0xa0, 0x25, 0xbd, 0xa5, 0xd8, 0xf5, 0x1d, 0x12, 0x87, 0x0b, 0x51, 0xa2,
	0x62, 0x29, 0x09, 0xf0, 0x4d, 0x1c, 0x2e, 0x8c, 0x9f, 0x41, 0xc9, 0xe9, 0x48, 0x07, 0x2d, 0xd1,
	0x70, 0x7a, 0xa6, 0xfd, 0xa5, 0x73, 0xf7, 0xe3, 0xed, 0xb5, 0xf3, 0xdd, 0xd7, 0xf6, 0xed, 0x75,
	0xd7, 0xfc, 0xc2, 0xbc, 0xee, 0x35, 0x0a, 0xe8, 0x18, 0x5e, 0xed, 0xc4, 0x07, 0x37, 0xbd, 0x8f,
	0x1a, 0xd2, 0xfe, 0xc0, 0x0f, 0x8d, 0xa2, 0xf1, 0x19, 0xd4, 0xbb, 0x14, 0xbb, 0x1c, 0x0f, 0xfa,
	0x16, 0xfe, 0x75, 0x86, 0x19, 0x47, 0x2d, 0x28, 0x7b, 0x62, 0x24, 0x44, 0x95, 0x1b, 0xfe, 0xe4,
	0xa3, 0x62, 0x65, 0x71, 0x03, 0x41, 0x63, 0x9d, 0xcc, 0xa6, 0x24, 0x66, 0xd8, 0x68, 0x40, 0xcd,
	0xe6, 0x2e, 0xe5, 0x2b, 0x3d, 0xe3, 0x5d, 0xa8, 0xaf, 0x90, 0x8c, 0x54, 0x87, 0xaa, 0xcd, 0xc9,
	0x74, 0xcd, 0x11, 0x59, 0x29, 0xb0, 0xa6, 0x7c, 0xef, 0x06, 0x7c, 0x8b, 0x92, 0x03, 0x19, 0xe5,
	0x53, 0x40, 0x97, 0xbe, 0xbf, 0x9a, 0x9a, 0xec, 0xfa, 0xa7, 0x20, 0x27, 0xd3, 0x25, 0xbc, 0xdb,
	0x37, 0x5c, 0x22, 0x6a, 0x1c, 0xc2, 0xab, 0xad, 0xdc, 0x4c, 0xf2, 0x17, 0x38, 0xbc, 0x19, 0xd8,
	0xc4, 0x9b, 0x60, 0xfe, 0x55, 0xc0, 0x38, 0x8e, 0x73, 0xd5, 0x0f, 0x01, 0x18, 0xa6, 0xf3, 0xc0,
	0xc3, 0xeb, 0x4f, 0xa4, 0xba, 0x7c, 0x3c, 0xa9, 0xd8, 0x29, 0x6a, 0xf6, 0xac, 0x4a, 0x46, 0x30,
	0x7d, 0xf4, 0x3e, 0x54, 0x43, 0x91, 0x8e, 0x69, 0x3a, 0x96, 0x45, 0x31, 0x1c, 0xef, 0xe4, 0x60,
	0x32, 0x98, 0x86, 0x0a, 0x47, 0xbb, 0x67, 0xa5, 0xb7, 0x38, 0xff, 0xb3, 0x04, 0xc5, 0x41, 0x1f,
	0x7d, 0x0e, 0x4a, 0xde, 0x5e, 0x74, 0x9c, 0xd7, 0xb1, 0xe3, 0x96, 0xa6, 0x3e, 0x0f, 0x64, 0xb5,
	0x14, 0xd0, 0x05, 0xbc, 0xcc, 0x3a, 0x8f, 0x8e, 0x56, 0x7d, 0xd8, 0x32, 0x47, 0x3b, 0x7e, 0x86,
	0xaf, 0xb2, 0x3f, 0x81, 0x72, 0xea, 0x09, 0x3a, 0x5c, 0x93, 0x36, 0x4c, 0xd3, 0x8e, 0x76, 0xe1,
	0xcd, 0xd4, 0xd4, 0xab, 0x75, 0xea, 0x96, 0x99, 0xeb, 0xd4, 0x1d, 0x4b, 0x0b, 0xe8, 0x06, 0x0e,
	0x36, 0x8c, 0x41, 0x5a, 0x4e, 0x7c, 0xee, 0xb4, 0xf6, 0x7a, 0x6f, 0x6c, 0xa5, 0xf4, 0x2d, 0xd4,
	0xb6, 0xfb, 0x8b, 0xde, 0xe4, 0x09, 0x7b, 0x3d, 0xd6, 0xf4, 0xb7, 0x85, 0x73, 0xc9, 0xab, 0xd3,
	0x87, 0x27, 0x5d, 0xfa, 0xfb, 0x49, 0x2f, 0xfc, 0xb6, 0xd4, 0xa5, 0x87, 0xa5, 0x2e, 0xfd, 0xb5,
	0xd4, 0xa5, 0x7f, 0x96, 0xba, 0xf4, 0xc7, 0xbf, 0x7a, 0xe1, 0xa7, 0xec, 0x15, 0x1e, 0x96, 0xc5,
	0xeb, 0xfa, 0xf1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xd2, 0xc7, 0xd1, 0xd4, 0x05, 0x00,
	0x00,
}
