#Requires -Version 7

$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'

function fail ( [string]$Message ) {
    # like throw, but without the obnoxious big red block
    Write-Error -ErrorAction 'Stop' $Message
}

function run {
    param(
        [Parameter(Mandatory, Position = 0)]
        [string]$cmd,

        [Parameter(Position = 1, ValueFromRemainingArguments)]
        [string[]]$params
    )

    Write-Verbose "$cmd $params"
    & $cmd @params 2>&1
    if ( $LASTEXITCODE -ne 0 ) {
        fail "Command failed: $cmd $params"
    }
}

$root = run git 'rev-parse' '--show-toplevel'

function Get-JavaPath {
    $java = Get-Command -ErrorAction Ignore java
    if ( [string]::IsNullOrEmpty($java) ) {
        fail 'Java is not installed'
    }
    if ( $java.Version.Major -lt 8 ) {
        fail "Java version ($(java.Version)) must be greater than 8"
    }

    $Path = $java.Source
    Write-Verbose "Using Java: $Path"

    $path
}

function Get-SwaggerCLI {
    param (
        [string]$RepoURL = 'https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli',
        [string]$DestDir = (Join-Path $root 'bin/tool')
    )

    $u = [System.UriBuilder]::new($RepoURL)
    $u.Path = Join-Path $u.Path 'maven-metadata.xml'

    [xml]$:meta = run curl '-sL' '--fail' ($u.Uri)
    if ($LASTEXITCODE -ne 0) {
        fail "Failed to curl 'swagger-codegen-cli' repo metadata"
    }

    $latest = $meta.metadata.versioning.versions.version |
        ForEach-Object { [semver]($_) } |
        Where-Object { [string]::IsNullOrEmpty($_.PreReleaseLabel) } |
        Sort-Object |
        Select-Object -Last 1
    if ( [string]::IsNullOrEmpty($latest) ) {
        fail "Unable to retrieve latest version from: $RepoURL"
    }

    New-Item -ItemType Directory -Force -Path $DestDir > $null

    $dest = Join-Path $DestDir 'swagger-codegen-cli.jar'

    $u = [System.UriBuilder]::new($RepoURL)
    $u.Path = Join-Path $u.Path "$latest" "swagger-codegen-cli-${latest}.jar"

    run curl '-L' '--no-progress-meter' '--fail-with-body' '-o' $dest ($u.Uri)

    Write-Host "Downloaded 'swagger-codegen-cli' version '$latest' to: $dest"

    $dest
}

$java = Get-JavaPath
$swagger = Get-SwaggerCLI

$dest = $(Join-Path $root 'internal\hcs\schema2')
# Remove-Item -ErrorAction Ignore -Recurse -Force $dest
New-Item -ItemType Directory -Force -Path $dest > $null

# TODo: would `--type-mappings binary=[]byte` cause issues with C++ unmarshalling?

$a = @(
    'generate',
    '--input-spec', (Join-Path $root 'out/hcsschema/schema.json'),
    '--lang', 'go',
    '-Dmodels', '-DmodelDocs=false',
    '-DpackageName=hcsschema', '-DhideGenerationTimestamp=false',
    '--additional-properties', "appDescription='generated by bob',infoEmail=containerplat-dev@microsoft.com",
    '--language-specific-primitives', '[]byte,error',
    '--type-mappings', 'integer=int64', # absent an explicit format, defer to int64 to avoid overflow issues
    '--reserved-words-mappings', 'Plan9=PlanNine',
    '--template-dir', (Join-Path $PSScriptRoot 'go'),
    '--output', $dest
)
run $java '-jar' $swagger @a # '-v' > "$root/temp/out.txt"

# remove "model_" prefix in file name, and prevent "_plan9" in file name
foreach ( $f in (Get-ChildItem -Name $dest) ) {
    $n = ($f -replace '^model_', '') -replace 'plan9', 'plan_nine'
    if ( $n -eq $f ) {
        continue
    }

    foreach ( $i in (1..3) ) {
        Write-Verbose "Rename '$f' to '$n' [Attempt ${i}]"
        try {
            Move-Item -Force (Join-Path $dest $f) (Join-Path $dest $n)
            break
        } catch {
            Write-Warning "Could not rename ${f}: $_"
        }
        Start-Sleep -Milliseconds 500
    }
}

$go = Get-Command -ErrorAction Ignore go | Select-Object -ExpandProperty 'source'
if ( -not [string]::IsNullOrEmpty($go) ) {
    run $go 'fmt' (Join-Path $dest '...')
}
