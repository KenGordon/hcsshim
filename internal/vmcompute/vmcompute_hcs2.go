//go:build windows

// Code generated by 'go generate' using "github.com/Microsoft/go-winio/tools/mkwinsyscall"; 
// And then edited by nipavlo

package vmcompute

import (
	"syscall"
	"unsafe"
	"errors"

	"golang.org/x/sys/windows"
)

const (
	JOB_OBJECT_ALL_ACCESS = 2031679
	HcsResourceTypeJob = 2
	HCS_MEM_JOB_URI = "hcs:/VirtualMachine/VmmemJob"
	HCS_CPU_JOB_URI = "hcs:/VirtualMachine/WorkerJob"
	INFINITE_OPERATION_TIMEOUT = 1000000
)
var (
	modcomputecore = windows.NewLazySystemDLL("computecore.dll")
	modkernel32    = windows.NewLazySystemDLL("kernel32.dll")

	procHcsAddResourceToOperation          = modcomputecore.NewProc("HcsAddResourceToOperation")
	procHcsCloseOperation                  = modcomputecore.NewProc("HcsCloseOperation")
	procHcsCreateComputeSystemV2           = modcomputecore.NewProc("HcsCreateComputeSystem")
	procHcsCreateOperation                 = modcomputecore.NewProc("HcsCreateOperation")
	procHcsWaitForOperationResult          = modcomputecore.NewProc("HcsWaitForOperationResult")
	procOpenJobObjectW                     = modkernel32.NewProc("OpenJobObjectW")
)

type HcsOperation syscall.Handle

func hcsAddResourceToOperation(operation HcsOperation, rtype uint32, uri string, handle syscall.Handle) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(uri)
	if hr != nil {
		return
	}
	return _hcsAddResourceToOperation(operation, rtype, _p0, handle)
}

func _hcsAddResourceToOperation(operation HcsOperation, rtype uint32, uri *uint16, handle syscall.Handle) (hr error) {
	hr = procHcsAddResourceToOperation.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.Syscall6(procHcsAddResourceToOperation.Addr(), 4, uintptr(operation), uintptr(rtype), uintptr(unsafe.Pointer(uri)), uintptr(handle), 0, 0)
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsCreateComputeSystemV2(id string, configuration string, operation HcsOperation, security_descriptor *uint32, computeSystem *HcsSystem) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(id)
	if hr != nil {
		return
	}
	var _p1 *uint16
	_p1, hr = syscall.UTF16PtrFromString(configuration)
	if hr != nil {
		return
	}
	return _hcsCreateComputeSystemV2(_p0, _p1, operation, security_descriptor, computeSystem)
}

func _hcsCreateComputeSystemV2(id *uint16, configuration *uint16, operation HcsOperation, security_descriptor *uint32, computeSystem *HcsSystem) (hr error) {
	hr = procHcsCreateComputeSystemV2.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.Syscall6(procHcsCreateComputeSystemV2.Addr(), 5, uintptr(unsafe.Pointer(id)), uintptr(unsafe.Pointer(configuration)), uintptr(operation), uintptr(unsafe.Pointer(security_descriptor)), uintptr(unsafe.Pointer(computeSystem)), 0)
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsCreateOperation(a *syscall.Handle, b *syscall.Handle) (hr error, op HcsOperation) {
	hr = procHcsCreateOperation.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.Syscall(procHcsCreateOperation.Addr(), 2, uintptr(unsafe.Pointer(a)), uintptr(unsafe.Pointer(b)), 0)
	if r0 == 0 {
		hr = errors.New("HCSCreateOperation returned a NULL handle")
		return
	}
	op = HcsOperation(r0)
	return
}

func hcsWaitForOperationResult(op HcsOperation, tmout uint32, result **uint16) (hr error) {
	hr = procHcsWaitForOperationResult.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.Syscall(procHcsWaitForOperationResult.Addr(), 3, uintptr(op), uintptr(tmout), uintptr(unsafe.Pointer(result)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func openJobObject(access uint32, inheritHandle bool, name string) (hr error, handle syscall.Handle) {
	_p0, hr := syscall.UTF16PtrFromString(name)
	if hr != nil {
		return
	}
	return _openJobObject(access, inheritHandle, _p0)
}

func _openJobObject(access uint32, inheritHandle bool, name *uint16) (hr error, handle syscall.Handle) {
	hr = procOpenJobObjectW.Find()
	if hr != nil {
		return
	}
	var _p1 uint32
	if inheritHandle {
		_p1 = 1
	}
	r0, _, _ := syscall.Syscall(procOpenJobObjectW.Addr(), 3, uintptr(access), uintptr(_p1), uintptr(unsafe.Pointer(name)))
	if r0 == 0 {
		hr = errors.New("OpenJobObjectW returned a NULL handle")
		return
	}
	handle = syscall.Handle(r0)
	return
}

func hcsCloseOperation(operation HcsOperation) {
	syscall.Syscall(procHcsCloseOperation.Addr(), 1, uintptr(operation), 0, 0)
	return
}